.TH helios-import-songs 1 "August 2021"
.SH NAME
helios-import-songs - Batch import songs into Helios.

.SH SYNOPSIS
.B helios-import-songs [\fIOPTIONS\fR] catalogue.csv[.gz|.bz2|.zip|.xz]

.SH DESCRIPTION
Use this utility to batch import your catalogue into a Helios server, as opposed
to one at a time with \fBhelios-add-song\fR(1). If you are a record label and
your server has just been brought online for the first time and configured, but
contains no music, this is likely the tool you should be looking at.

If you only want to import a single song you should probably take a look at
\fBhelios-add-song\fR(1) instead.

The list of files proposed for import are listed in \fIcatalogue.csv[.gz]\fR.
For precise details on its format see \fBINPUT FORMAT\fR below.

You are recommended to perform your first batch import with \fI--dry-run\fR
before making changes to your database. This ensures that your inport catalogue
CSV file is formatted correctly.

By default each song submitted for analysis has a local copy stored on the
server. If you want to disable this, use \fI--no-store\fR. Storing a server side
copy is only necessary if you expect that clients may want to submit download
requests from the server or if the server's algorithms are improved and a
re-analysis of the original songs are necessary.

Depending on your server's hardware capabilities, the time necessary to complete
a batch import can vary. On an Intel(R) Core(TM) i7-4790 CPU with eight logical
cores and a base frequency of 3.60GHz each, analysis of one hundred songs took a
total of approximately 32.8 seconds, or about 0.33 seconds per song.

.SH OPTIONS

.TP
\fB\--delimiter="<character>"\fR
Delimiter character to use. Default is comma character.

.TP
\fB\--dry-run\fR
Perform a dry run only. Do not actually make any modifications to the server.

.TP
\fB\--maximum-errors="<max>"\fR
Maximum number of errors to tolerate before exiting. The default is one. Set to
zero for unlimited non-fatal errors. Note that syntax errors in the input
catalogue are always considered fatal.

.TP
\fB\--no-store\fR
Delete the song on the server immediately after analysis. Defaults to store.

.TP
\fB\--offset="<offset>"\fR
Row offset to begin processing on. Defaults to 1, or first line of file.

.TP
\fB\--threads="<count>"\fR
Number of concurrent import threads. Default is zero, or match to the
autodetected number of logical cores on the server. Be careful when doing the
latter because you may be surprised to learn that your server has hundreds of
them.

.TP
\fB\--threads-max="<count>"\fR
Spawn no more than at most this many concurrent import threads. Use this when
the number of concurrent import threads is automatically detected and your
server has a large number of cores. This can function as a safety valve to
ensure the client doesn't spawn hundreds of i/o blocking threads it cannot
service fast enough. The default is 8.

.so man7/helios-client-utilities-common.7

.SH INPUT FORMAT
The list of files to import are stored in an import catalogue file. This file is
a UTF-8 encoded CSV file. The format is mostly as described in RFC 4180 with a
required header line. The MIME type would therefore be "\fItext/csv;
charset=utf-8; header=present\fR".

The file may be optionally compressed. The advantage of doing so is reduced file
size, automatic integrity verification during decompression, and reduced disk
i/o. Any catalogue ending in .gz, .bz2, .zip, or .xz will be assumed to be
compressed and will be automatically decompressed as it is read.

The first line begins with a list of the column fields used. As an example, this
might be:

\fIreference\fR,\fIalbum\fR,\fIartist\fR,\fItitle\fR,\fIgenre\fR,\fIisrc\fR,\fIbeats_per_minute\fR,\fIyear\fR,\fIpath\fR

The "#" character can be used to denote a comment. The parser will ignore
any characters including and following after that character.

At a bare minimum \fIreference\fR and \fIpath\fR must be present or an error
will be raised. Any extraneous column fields that are not recognized will also
raise an error.

After the initial column header line, each non-empty line thereafter is expected
to be a song. Each column field is separated by a comma delimiter by default,
but may be optionally overridden with \fI--delimiter\fR.

All fields should be surrounded by double quotes. Any double quote character
within a field's value should be escaped with a forward slash. As an example,
"like this string containing pairs of double quotes \\"here\\" and \\"here\\"".

The \fIreference\fR field is mandatory and must be a unique identifier you would
like assigned to the song to be used in future queries. This field may contain
any combination of alpha-numeric characters and underscores.

Other than \fIreference\fR and \fIpath\fR, all other fields may be optionally
omitted.

An ommitted field and one that contains an explicit empty "" string have
different semantics. If it is possible for a field to be automatically detected
and that is what you actually desire, omit the field. But if you really do want
an empty string for, say, the song title, provide an empty "" string.

If \fIalbum\fR, \fIartist\fR, \fIgenre\fR, or \fIisrc\fR fields are set to ""
empty strings, this tells the server to ensure those fields remain empty in its
database when the song is added to the catalogue. If any of those fields are
instead omitted, including \fIbeats_per_minute\fR, the server will try to
automatically determine the field's value from the available metadata already
embedded within the audio stream.

Whether relying on auto detection or explicitly providing a value for the
\fItitle\fR field, a value must be present one way or the other. If auto
detection is requested and the server cannot extract a value from the embedded
metadata, it will raise an error. This ensures that every song in your database
will at least have a title - which need not to be unique.

If \fIbeats_per_minute\fR is omitted, as with the other fields discussed, the
server will first try to obtain this information from the available embedded
metadata. Not all audio containers will support this information, and even if
the one you are using does support it, this information may still not be
embedded. If that happens the server will try to automatically calculate it
through signal analysis of the audio stream.

The \fIpath\fR field contains either an operating system path or a URL. If the
former it can be either an absolute or relative path.

If the file is an operating system path to a remote NFS mount or other network
share (as is common in a data centre enviroment), you should ensure you have
adequate bandwidth and fast file system traversal capability. The latter is
especially important when dealing with directories containing millions of songs.
An inefficient file system traversal can waste substantial amounts of time
if a read operation blocks excessively while walking the remote directory tree.

.SH EXAMPLES

Sample compressed \fIcatalogue.csv\fR with default comma delimiter:

$ cat catalogue.csv.gz | gunzip
    ...
    "REFERENCE_123", "Some album", "Some artist", "Some \"title\"", "Some genre", "USA2P0502717", "135.72", "2003", "/mnt/nfs/music/some_song.flac"
    "REFERENCE_124", , , , "Some genre", , , , "/mnt/nfs/music/some_other_song.flac"
    ...

Batch import the above file:

$ helios-import-songs catalogue.csv.gz

.SH EXIT STATUS
\fBhelios-import-songs\fR exits with a status of zero if no errors occurred.

In the event an unrecoverable error occurs, the process will exit with a status
of one. Any songs that failed to import will have their references written out
to \fIhelios_import_errors.log\fR in the current working directory.

.SH AUTHOR
Cartesian Theatre <info@cartesiantheatre.com>

.SH REPORTING BUGS
Report bugs to Cartesian Theatre <info@cartesiantheatre.com>

.SH COPYRIGHT
Copyright (C) 2015-2021 Cartesian Theatre. All rights reserved.

.SH SEE ALSO
\fBgzip\fR(1)
.br
\fBhelios\fR(7)
.br
\fBhelios-add-song\fR(1)
.br
\fBhelios-get-status\fR(1)
.br
\fBhelios-provision-magnatune\fR(1)
.br
\fIhttps://www.heliosmusic.io\fR
.br

